import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { mondayService } from "@/lib/monday";
import { LineService } from "@/lib/line";
import { RepairTicketStatus } from "@prisma/client";

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö webhook signature (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const signature = request.headers.get("x-monday-signature");
    if (!verifyMondaySignature(body, signature)) {
      return NextResponse.json({ error: "Invalid signature" }, { status: 401 });
    }

    const webhookData = mondayService.parseWebhookPayload(body);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á status ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      webhookData.eventType === "update_column_value" &&
      webhookData.columnId === "status"
    ) {
      await handleStatusChange(webhookData);
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error("Monday webhook error:", error);
    return NextResponse.json(
      {
        error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• webhook",
      },
      { status: 500 }
    );
  }
}

async function handleStatusChange(webhookData: any) {
  try {
    // ‡∏´‡∏≤ ticket ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ mondayTicketId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const tickets = await prisma.repairTicket.findMany({
      where: { mondayTicketId: webhookData.itemId },
      include: {
        user: true,
        device: {
          include: {
            model: {
              include: {
                brand: {
                  include: {
                    company: true,
                  },
                },
              },
            },
          },
        },
      },
    });

    if (tickets.length === 0) {
      console.log(`Ticket not found for Monday ID: ${webhookData.itemId}`);
      return;
    }

    const ticket = tickets[0]; // ‡πÉ‡∏ä‡πâ ticket ‡πÅ‡∏£‡∏Å

    // ‡πÅ‡∏õ‡∏•‡∏á Monday status ‡πÄ‡∏õ‡πá‡∏ô RepairTicketStatus
    const newStatus = mapMondayStatusToTicketStatus(webhookData.value?.label);
    const oldStatus = ticket.status;

    if (newStatus && newStatus !== oldStatus) {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô database
      await prisma.repairTicket.update({
        where: { id: ticket.id },
        data: { status: newStatus },
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å status history
      await prisma.repairStatusHistory.create({
        data: {
          repairTicketId: ticket.id,
          fromStatus: oldStatus,
          toStatus: newStatus,
          note: "Updated from Monday.com",
        },
      });

      // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
      if (ticket.user.lineUserId) {
        const deviceInfo = `${ticket.device.model.brand.company.name} ${ticket.device.model.brand.name} ${ticket.device.model.name}`;

        await sendLineNotification(ticket.user.lineUserId, {
          ticketId: ticket.ticketNumber,
          ticketTitle: ticket.title,
          oldStatus,
          newStatus,
          deviceInfo,
        });
      }

      console.log(
        `Ticket ${ticket.ticketNumber} status updated from ${oldStatus} to ${newStatus}`
      );
    }
  } catch (error) {
    console.error("Error handling status change:", error);
    throw error;
  }
}

async function sendLineNotification(
  lineUserId: string,
  data: {
    ticketId: string;
    ticketTitle: string;
    oldStatus: RepairTicketStatus;
    newStatus: RepairTicketStatus;
    deviceInfo: string;
  }
) {
  const statusEmoji = getStatusEmoji(data.newStatus);
  const statusText = getStatusText(data.newStatus);

  const message = `üîß ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°

${data.ticketTitle}

‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${data.deviceInfo}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: ${statusEmoji} ${statusText}
Ticket: ${data.ticketId}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£`;

  await LineService.sendTextMessage(lineUserId, message);
}

function getStatusEmoji(status: RepairTicketStatus): string {
  const emojiMap = {
    PENDING: "‚è≥",
    IN_PROGRESS: "üîß",
    WAITING_PARTS: "‚è±Ô∏è",
    COMPLETED: "‚úÖ",
    CANCELLED: "‚ùå",
  };
  return emojiMap[status] || "‚è≥";
}

function getStatusText(status: RepairTicketStatus): string {
  const textMap = {
    PENDING: "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    IN_PROGRESS: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°",
    WAITING_PARTS: "‡∏£‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà",
    COMPLETED: "‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
    CANCELLED: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
  };
  return textMap[status] || "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£";
}

function mapMondayStatusToTicketStatus(
  mondayStatus: string
): RepairTicketStatus | null {
  const statusMap: { [key: string]: RepairTicketStatus } = {
    Pending: "PENDING",
    "In Progress": "IN_PROGRESS",
    "Waiting Parts": "WAITING_PARTS",
    Completed: "COMPLETED",
    Cancelled: "CANCELLED",
  };

  return statusMap[mondayStatus] || null;
}

function verifyMondaySignature(body: any, signature: string | null): boolean {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature ‡∏à‡∏≤‡∏Å Monday.com
  // ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ HMAC SHA256 ‡∏Å‡∏±‡∏ö secret key
  if (!process.env.MONDAY_WEBHOOK_SECRET) {
    return true; // ‡∏Ç‡πâ‡∏≤‡∏° verification ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ secret
  }

  if (!signature) {
    return false;
  }

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö - ‡πÉ‡∏ô production ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ HMAC SHA256 verification
  // const crypto = require('crypto');
  // const expectedSignature = crypto
  //   .createHmac('sha256', process.env.MONDAY_WEBHOOK_SECRET)
  //   .update(JSON.stringify(body))
  //   .digest('hex');
  // return `sha256=${expectedSignature}` === signature;

  return true; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
}
