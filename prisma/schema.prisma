// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core business models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  lineUserId    String?        @unique
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  repairTickets RepairTicket[]
  comments      Comment[]
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brands    Brand[]
}

model Brand {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models    Model[]

  @@unique([name, companyId])
}

model Model {
  id        String   @id @default(cuid())
  name      String
  brandId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  brand     Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  devices   Device[]

  @@unique([name, brandId])
}

model Device {
  id           String         @id @default(cuid())
  serialNumber String         @unique
  modelId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  model        Model          @relation(fields: [modelId], references: [id], onDelete: Cascade)
  repairTickets RepairTicket[]
}

model RepairTicket {
  id              String              @id @default(cuid())
  ticketNumber    String              @unique
  title           String
  description     String              @db.Text
  images          String[]            @default([])
  status          RepairTicketStatus  @default(PENDING)
  priority        Priority            @default(MEDIUM)
  userId          String
  deviceId        String
  mondayTicketId  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  user            User                @relation(fields: [userId], references: [id])
  device          Device              @relation(fields: [deviceId], references: [id])
  comments        Comment[]
  statusHistory   RepairStatusHistory[]
}

model Comment {
  id              String       @id @default(cuid())
  content         String       @db.Text
  userId          String
  repairTicketId  String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id])
  repairTicket    RepairTicket @relation(fields: [repairTicketId], references: [id], onDelete: Cascade)
}

model RepairStatusHistory {
  id              String             @id @default(cuid())
  repairTicketId  String
  fromStatus      RepairTicketStatus?
  toStatus        RepairTicketStatus
  note            String?            @db.Text
  createdAt       DateTime           @default(now())
  repairTicket    RepairTicket       @relation(fields: [repairTicketId], references: [id], onDelete: Cascade)
}

model NotificationLog {
  id        String           @id @default(cuid())
  type      NotificationType
  recipient String
  message   String           @db.Text
  success   Boolean          @default(false)
  error     String?          @db.Text
  createdAt DateTime         @default(now())
}

// Enums
enum UserRole {
  USER
  ADMIN
  TECHNICIAN
}

enum RepairTicketStatus {
  PENDING
  IN_PROGRESS
  WAITING_PARTS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  LINE_GROUP
  LINE_USER
  EMAIL
  MONDAY_WEBHOOK
}
